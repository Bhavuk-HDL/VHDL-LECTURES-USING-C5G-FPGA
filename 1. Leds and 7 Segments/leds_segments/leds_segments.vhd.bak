-- Code for using different clocks of the Cyclone V
-- A clock for Leds and one for the Seven Segment Display

-- Libraries declaration
library IEEE;
use IEEE.std_logic_1164.all;


-- Entities declaration
entity leds_segments is
port(
		clk_led : in std_logic;
		LEDG0 : out std_logic;
		LEDG1 : out std_logic;
		LEDG2 : out std_logic;
		LEDG3 : out std_logic;
		LEDR0 : out std_logic;
		LEDR1 : out std_logic;
		LEDR2 : out std_logic;
		LEDR3 : out std_logic
		
		clk_segment : in std_logic;
		segment0 : buffer std_logic_vector(0 to 6) := "111110";
		segment1 : buffer std_logic_vector(0 to 6) := "111110";
		segment2 : buffer std_logic_vector(0 to 6) := "111110";
		segment3 : buffer std_logic_vector(0 to 6) := "111110");
end led_segments;

-- Architectures declaration
architecture led_segments_arc of led_segments is
	signal status1 : std_logic := '0';
	signal status2 : std_logic := '0';
	
	signal one : std_logic := '0';
	signal two : std_logic := '0';
	signal three : std_logic := '0';
	
begin
	process (clk_led)
		variable count : integer range 0 to 50000000 := 0;
		begin
			if (rising_edge(clk_led)) and (clk_led = '1' ) then
				if count = 24999999 then
					status1 <= not status1;
					LEDG0 <= status1;
					LEDG2 <= status1;
					LEDR0 <= status1;
					LEDR2 <= status1;
					count := count + 1;
				elsif count = 49999999 then
					status2 <= not status2;
					LEDG1 <= status2;
					LEDG3 <= status2;
					LEDR1 <= status2;
					LEDR3 <= status2;
					count := 0;
				else
					count := count + 1;
				end if;
			end if;
	end process;
	
	
	process (clk_segment)
		variable count : integer range 0 to 125000000 :=0;
		begin
			if (rising_edge(clk_segment)) and (clk_segment = '1') then
				if count = 124999999 then
					count := 0;
					if segment0 = "1111011" then
						one <= '1';
					end if;
					if segment1 = "1111011" then
						two <= '1';
					end if;
					if segment2 = "1111011" then
						three <= '1';
					end if;
					
					case(segment0) is
					when "1111110" => segment0 <= "0110000";
					when "0110000" => segment0 <= "1101101";
					when "1101101" => segment0 <= "1111001";
					when "1111001" => segment0 <= "0010011";
					when "0010011" => segment0 <= "1011011";
					when "1011011" => segment0 <= "1011111";
					when "1011111" => segment0 <= "1110000";
					when "1110000" => segment0 <= "1111111";
					when "1111111" => segment0 <= "1111011";
					when "1111011" => segment0 <= "1111110";
					end case;
					
					if one = '1' then
						one <= '0';
						case(segment1) is
						when "1111110" => segment0 <= "0110000";
						when "0110000" => segment0 <= "1101101";
						when "1101101" => segment0 <= "1111001";
						when "1111001" => segment0 <= "0010011";
						when "0010011" => segment0 <= "1011011";
						when "1011011" => segment0 <= "1011111";
						when "1011111" => segment0 <= "1110000";
						when "1110000" => segment0 <= "1111111";
						when "1111111" => segment0 <= "1111011";
						when "1111011" => segment0 <= "1111110";
						end case;
					end if;
						
					if two = '1' then
						two <= '0';
						case(segment2) is
						when "1111110" => segment0 <= "0110000";
						when "0110000" => segment0 <= "1101101";
						when "1101101" => segment0 <= "1111001";
						when "1111001" => segment0 <= "0010011";
						when "0010011" => segment0 <= "1011011";
						when "1011011" => segment0 <= "1011111";
						when "1011111" => segment0 <= "1110000";
						when "1110000" => segment0 <= "1111111";
						when "1111111" => segment0 <= "1111011";
						when "1111011" => segment0 <= "1111110";
						end case;
					end if;
					
					if three = '1' then
						three <= '0';
						case(segment3) is
						when "1111110" => segment0 <= "0110000";
						when "0110000" => segment0 <= "1101101";
						when "1101101" => segment0 <= "1111001";
						when "1111001" => segment0 <= "0010011";
						when "0010011" => segment0 <= "1011011";
						when "1011011" => segment0 <= "1011111";
						when "1011111" => segment0 <= "1110000";
						when "1110000" => segment0 <= "1111111";
						when "1111111" => segment0 <= "1111011";
						when "1111011" => segment0 <= "1111110";
						end case;
					end if;
						
				else
					count := count + 1;
				end if;
			end if;
	end process;
end led_segments_arc;
