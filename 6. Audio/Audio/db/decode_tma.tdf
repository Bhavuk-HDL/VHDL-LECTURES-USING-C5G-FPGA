--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2019:04:11:16:04:12:SJ cbx_lpm_add_sub 2019:04:11:16:04:12:SJ cbx_lpm_compare 2019:04:11:16:04:12:SJ cbx_lpm_decode 2019:04:11:16:04:12:SJ cbx_mgl 2019:04:11:16:07:46:SJ cbx_nadder 2019:04:11:16:04:12:SJ cbx_stratix 2019:04:11:16:04:12:SJ cbx_stratixii 2019:04:11:16:04:12:SJ  VERSION_END


-- Copyright (C) 2019  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1004w[3..0]	: WIRE;
	w_anode1014w[3..0]	: WIRE;
	w_anode1024w[3..0]	: WIRE;
	w_anode848w[1..0]	: WIRE;
	w_anode857w[3..0]	: WIRE;
	w_anode874w[3..0]	: WIRE;
	w_anode884w[3..0]	: WIRE;
	w_anode894w[3..0]	: WIRE;
	w_anode904w[3..0]	: WIRE;
	w_anode914w[3..0]	: WIRE;
	w_anode924w[3..0]	: WIRE;
	w_anode934w[3..0]	: WIRE;
	w_anode946w[1..0]	: WIRE;
	w_anode953w[3..0]	: WIRE;
	w_anode964w[3..0]	: WIRE;
	w_anode974w[3..0]	: WIRE;
	w_anode984w[3..0]	: WIRE;
	w_anode994w[3..0]	: WIRE;
	w_data846w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode1024w[3..3], w_anode1014w[3..3], w_anode1004w[3..3], w_anode994w[3..3], w_anode984w[3..3], w_anode974w[3..3], w_anode964w[3..3], w_anode953w[3..3]), ( w_anode934w[3..3], w_anode924w[3..3], w_anode914w[3..3], w_anode904w[3..3], w_anode894w[3..3], w_anode884w[3..3], w_anode874w[3..3], w_anode857w[3..3]));
	w_anode1004w[] = ( (w_anode1004w[2..2] & w_data846w[2..2]), (w_anode1004w[1..1] & (! w_data846w[1..1])), (w_anode1004w[0..0] & w_data846w[0..0]), w_anode946w[1..1]);
	w_anode1014w[] = ( (w_anode1014w[2..2] & w_data846w[2..2]), (w_anode1014w[1..1] & w_data846w[1..1]), (w_anode1014w[0..0] & (! w_data846w[0..0])), w_anode946w[1..1]);
	w_anode1024w[] = ( (w_anode1024w[2..2] & w_data846w[2..2]), (w_anode1024w[1..1] & w_data846w[1..1]), (w_anode1024w[0..0] & w_data846w[0..0]), w_anode946w[1..1]);
	w_anode848w[] = ( (w_anode848w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode857w[] = ( (w_anode857w[2..2] & (! w_data846w[2..2])), (w_anode857w[1..1] & (! w_data846w[1..1])), (w_anode857w[0..0] & (! w_data846w[0..0])), w_anode848w[1..1]);
	w_anode874w[] = ( (w_anode874w[2..2] & (! w_data846w[2..2])), (w_anode874w[1..1] & (! w_data846w[1..1])), (w_anode874w[0..0] & w_data846w[0..0]), w_anode848w[1..1]);
	w_anode884w[] = ( (w_anode884w[2..2] & (! w_data846w[2..2])), (w_anode884w[1..1] & w_data846w[1..1]), (w_anode884w[0..0] & (! w_data846w[0..0])), w_anode848w[1..1]);
	w_anode894w[] = ( (w_anode894w[2..2] & (! w_data846w[2..2])), (w_anode894w[1..1] & w_data846w[1..1]), (w_anode894w[0..0] & w_data846w[0..0]), w_anode848w[1..1]);
	w_anode904w[] = ( (w_anode904w[2..2] & w_data846w[2..2]), (w_anode904w[1..1] & (! w_data846w[1..1])), (w_anode904w[0..0] & (! w_data846w[0..0])), w_anode848w[1..1]);
	w_anode914w[] = ( (w_anode914w[2..2] & w_data846w[2..2]), (w_anode914w[1..1] & (! w_data846w[1..1])), (w_anode914w[0..0] & w_data846w[0..0]), w_anode848w[1..1]);
	w_anode924w[] = ( (w_anode924w[2..2] & w_data846w[2..2]), (w_anode924w[1..1] & w_data846w[1..1]), (w_anode924w[0..0] & (! w_data846w[0..0])), w_anode848w[1..1]);
	w_anode934w[] = ( (w_anode934w[2..2] & w_data846w[2..2]), (w_anode934w[1..1] & w_data846w[1..1]), (w_anode934w[0..0] & w_data846w[0..0]), w_anode848w[1..1]);
	w_anode946w[] = ( (w_anode946w[0..0] & data_wire[3..3]), enable_wire);
	w_anode953w[] = ( (w_anode953w[2..2] & (! w_data846w[2..2])), (w_anode953w[1..1] & (! w_data846w[1..1])), (w_anode953w[0..0] & (! w_data846w[0..0])), w_anode946w[1..1]);
	w_anode964w[] = ( (w_anode964w[2..2] & (! w_data846w[2..2])), (w_anode964w[1..1] & (! w_data846w[1..1])), (w_anode964w[0..0] & w_data846w[0..0]), w_anode946w[1..1]);
	w_anode974w[] = ( (w_anode974w[2..2] & (! w_data846w[2..2])), (w_anode974w[1..1] & w_data846w[1..1]), (w_anode974w[0..0] & (! w_data846w[0..0])), w_anode946w[1..1]);
	w_anode984w[] = ( (w_anode984w[2..2] & (! w_data846w[2..2])), (w_anode984w[1..1] & w_data846w[1..1]), (w_anode984w[0..0] & w_data846w[0..0]), w_anode946w[1..1]);
	w_anode994w[] = ( (w_anode994w[2..2] & w_data846w[2..2]), (w_anode994w[1..1] & (! w_data846w[1..1])), (w_anode994w[0..0] & (! w_data846w[0..0])), w_anode946w[1..1]);
	w_data846w[2..0] = data_wire[2..0];
END;
--VALID FILE
