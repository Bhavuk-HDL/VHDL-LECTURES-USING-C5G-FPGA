-- LPDDR2_s0_mm_interconnect_1.vhd

-- This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 18.1 646

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LPDDR2_s0_mm_interconnect_1 is
	port (
		avl_clk_out_clk_clk                             : in  std_logic                     := '0';             --                           avl_clk_out_clk.clk
		trk_mm_bridge_reset_reset_bridge_in_reset_reset : in  std_logic                     := '0';             -- trk_mm_bridge_reset_reset_bridge_in_reset.reset
		trk_mm_bridge_m0_address                        : in  std_logic_vector(15 downto 0) := (others => '0'); --                          trk_mm_bridge_m0.address
		trk_mm_bridge_m0_waitrequest                    : out std_logic;                                        --                                          .waitrequest
		trk_mm_bridge_m0_burstcount                     : in  std_logic_vector(0 downto 0)  := (others => '0'); --                                          .burstcount
		trk_mm_bridge_m0_byteenable                     : in  std_logic_vector(3 downto 0)  := (others => '0'); --                                          .byteenable
		trk_mm_bridge_m0_read                           : in  std_logic                     := '0';             --                                          .read
		trk_mm_bridge_m0_readdata                       : out std_logic_vector(31 downto 0);                    --                                          .readdata
		trk_mm_bridge_m0_readdatavalid                  : out std_logic;                                        --                                          .readdatavalid
		trk_mm_bridge_m0_write                          : in  std_logic                     := '0';             --                                          .write
		trk_mm_bridge_m0_writedata                      : in  std_logic_vector(31 downto 0) := (others => '0'); --                                          .writedata
		trk_mm_bridge_m0_debugaccess                    : in  std_logic                     := '0';             --                                          .debugaccess
		sequencer_reg_file_inst_avl_address             : out std_logic_vector(3 downto 0);                     --               sequencer_reg_file_inst_avl.address
		sequencer_reg_file_inst_avl_write               : out std_logic;                                        --                                          .write
		sequencer_reg_file_inst_avl_read                : out std_logic;                                        --                                          .read
		sequencer_reg_file_inst_avl_readdata            : in  std_logic_vector(31 downto 0) := (others => '0'); --                                          .readdata
		sequencer_reg_file_inst_avl_writedata           : out std_logic_vector(31 downto 0);                    --                                          .writedata
		sequencer_reg_file_inst_avl_byteenable          : out std_logic_vector(3 downto 0);                     --                                          .byteenable
		sequencer_reg_file_inst_avl_waitrequest         : in  std_logic                     := '0';             --                                          .waitrequest
		sequencer_scc_mgr_inst_avl_address              : out std_logic_vector(12 downto 0);                    --                sequencer_scc_mgr_inst_avl.address
		sequencer_scc_mgr_inst_avl_write                : out std_logic;                                        --                                          .write
		sequencer_scc_mgr_inst_avl_read                 : out std_logic;                                        --                                          .read
		sequencer_scc_mgr_inst_avl_readdata             : in  std_logic_vector(31 downto 0) := (others => '0'); --                                          .readdata
		sequencer_scc_mgr_inst_avl_writedata            : out std_logic_vector(31 downto 0);                    --                                          .writedata
		sequencer_scc_mgr_inst_avl_waitrequest          : in  std_logic                     := '0'              --                                          .waitrequest
	);
end entity LPDDR2_s0_mm_interconnect_1;

architecture rtl of LPDDR2_s0_mm_interconnect_1 is
	component altera_merlin_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(17 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(15 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_lock                : in  std_logic                     := 'X';             -- lock
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component altera_merlin_master_translator;

	component altera_merlin_master_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 116;
			PKT_ORI_BURST_SIZE_L      : integer := 114;
			PKT_RESPONSE_STATUS_H     : integer := 113;
			PKT_RESPONSE_STATUS_L     : integer := 112;
			PKT_QOS_H                 : integer := 111;
			PKT_QOS_L                 : integer := 108;
			PKT_DATA_SIDEBAND_H       : integer := 107;
			PKT_DATA_SIDEBAND_L       : integer := 100;
			PKT_ADDR_SIDEBAND_H       : integer := 99;
			PKT_ADDR_SIDEBAND_L       : integer := 95;
			PKT_BURST_TYPE_H          : integer := 94;
			PKT_BURST_TYPE_L          : integer := 93;
			PKT_CACHE_H               : integer := 92;
			PKT_CACHE_L               : integer := 89;
			PKT_THREAD_ID_H           : integer := 88;
			PKT_THREAD_ID_L           : integer := 87;
			PKT_BURST_SIZE_H          : integer := 86;
			PKT_BURST_SIZE_L          : integer := 84;
			PKT_TRANS_EXCLUSIVE       : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			ST_DATA_W                 : integer := 115;
			ST_CHANNEL_W              : integer := 1;
			AV_BURSTCOUNT_W           : integer := 3;
			SUPPRESS_0_BYTEEN_RSP     : integer := 1;
			ID                        : integer := 1;
			BURSTWRAP_VALUE           : integer := 4;
			CACHE_VALUE               : integer := 0;
			SECURE_ACCESS_BIT         : integer := 1;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                   : in  std_logic                     := 'X';             -- clk
			reset                 : in  std_logic                     := 'X';             -- reset
			av_address            : in  std_logic_vector(17 downto 0) := (others => 'X'); -- address
			av_write              : in  std_logic                     := 'X';             -- write
			av_read               : in  std_logic                     := 'X';             -- read
			av_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			av_waitrequest        : out std_logic;                                        -- waitrequest
			av_readdatavalid      : out std_logic;                                        -- readdatavalid
			av_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			av_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_lock               : in  std_logic                     := 'X';             -- lock
			cp_valid              : out std_logic;                                        -- valid
			cp_data               : out std_logic_vector(87 downto 0);                    -- data
			cp_startofpacket      : out std_logic;                                        -- startofpacket
			cp_endofpacket        : out std_logic;                                        -- endofpacket
			cp_ready              : in  std_logic                     := 'X';             -- ready
			rp_valid              : in  std_logic                     := 'X';             -- valid
			rp_data               : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			rp_channel            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			rp_startofpacket      : in  std_logic                     := 'X';             -- startofpacket
			rp_endofpacket        : in  std_logic                     := 'X';             -- endofpacket
			rp_ready              : out std_logic;                                        -- ready
			av_response           : out std_logic_vector(1 downto 0);                     -- response
			av_writeresponsevalid : out std_logic                                         -- writeresponsevalid
		);
	end component altera_merlin_master_agent;

	component altera_merlin_slave_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 90;
			PKT_ORI_BURST_SIZE_L      : integer := 88;
			PKT_RESPONSE_STATUS_H     : integer := 87;
			PKT_RESPONSE_STATUS_L     : integer := 86;
			PKT_BURST_SIZE_H          : integer := 85;
			PKT_BURST_SIZE_L          : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			PKT_SYMBOL_W              : integer := 8;
			ST_CHANNEL_W              : integer := 8;
			ST_DATA_W                 : integer := 96;
			AVS_BURSTCOUNT_W          : integer := 4;
			SUPPRESS_0_BYTEEN_CMD     : integer := 1;
			PREVENT_FIFO_OVERFLOW     : integer := 0;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0;
			ECC_ENABLE                : integer := 0
		);
		port (
			clk                     : in  std_logic                     := 'X';             -- clk
			reset                   : in  std_logic                     := 'X';             -- reset
			m0_address              : out std_logic_vector(17 downto 0);                    -- address
			m0_burstcount           : out std_logic_vector(2 downto 0);                     -- burstcount
			m0_byteenable           : out std_logic_vector(3 downto 0);                     -- byteenable
			m0_debugaccess          : out std_logic;                                        -- debugaccess
			m0_lock                 : out std_logic;                                        -- lock
			m0_readdata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			m0_readdatavalid        : in  std_logic                     := 'X';             -- readdatavalid
			m0_read                 : out std_logic;                                        -- read
			m0_waitrequest          : in  std_logic                     := 'X';             -- waitrequest
			m0_writedata            : out std_logic_vector(31 downto 0);                    -- writedata
			m0_write                : out std_logic;                                        -- write
			rp_endofpacket          : out std_logic;                                        -- endofpacket
			rp_ready                : in  std_logic                     := 'X';             -- ready
			rp_valid                : out std_logic;                                        -- valid
			rp_data                 : out std_logic_vector(87 downto 0);                    -- data
			rp_startofpacket        : out std_logic;                                        -- startofpacket
			cp_ready                : out std_logic;                                        -- ready
			cp_valid                : in  std_logic                     := 'X';             -- valid
			cp_data                 : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			cp_startofpacket        : in  std_logic                     := 'X';             -- startofpacket
			cp_endofpacket          : in  std_logic                     := 'X';             -- endofpacket
			cp_channel              : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			rf_sink_ready           : out std_logic;                                        -- ready
			rf_sink_valid           : in  std_logic                     := 'X';             -- valid
			rf_sink_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			rf_sink_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			rf_sink_data            : in  std_logic_vector(88 downto 0) := (others => 'X'); -- data
			rf_source_ready         : in  std_logic                     := 'X';             -- ready
			rf_source_valid         : out std_logic;                                        -- valid
			rf_source_startofpacket : out std_logic;                                        -- startofpacket
			rf_source_endofpacket   : out std_logic;                                        -- endofpacket
			rf_source_data          : out std_logic_vector(88 downto 0);                    -- data
			rdata_fifo_sink_ready   : out std_logic;                                        -- ready
			rdata_fifo_sink_valid   : in  std_logic                     := 'X';             -- valid
			rdata_fifo_sink_data    : in  std_logic_vector(33 downto 0) := (others => 'X'); -- data
			rdata_fifo_sink_error   : in  std_logic                     := 'X';             -- error
			rdata_fifo_src_ready    : in  std_logic                     := 'X';             -- ready
			rdata_fifo_src_valid    : out std_logic;                                        -- valid
			rdata_fifo_src_data     : out std_logic_vector(33 downto 0);                    -- data
			m0_response             : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			m0_writeresponsevalid   : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component altera_merlin_slave_agent;

	component altera_avalon_sc_fifo is
		generic (
			SYMBOLS_PER_BEAT    : integer := 1;
			BITS_PER_SYMBOL     : integer := 8;
			FIFO_DEPTH          : integer := 16;
			CHANNEL_WIDTH       : integer := 0;
			ERROR_WIDTH         : integer := 0;
			USE_PACKETS         : integer := 0;
			USE_FILL_LEVEL      : integer := 0;
			EMPTY_LATENCY       : integer := 3;
			USE_MEMORY_BLOCKS   : integer := 1;
			USE_STORE_FORWARD   : integer := 0;
			USE_ALMOST_FULL_IF  : integer := 0;
			USE_ALMOST_EMPTY_IF : integer := 0
		);
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset             : in  std_logic                     := 'X';             -- reset
			in_data           : in  std_logic_vector(88 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			out_data          : out std_logic_vector(88 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic;                                        -- endofpacket
			csr_address       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- address
			csr_read          : in  std_logic                     := 'X';             -- read
			csr_write         : in  std_logic                     := 'X';             -- write
			csr_readdata      : out std_logic_vector(31 downto 0);                    -- readdata
			csr_writedata     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			almost_full_data  : out std_logic;                                        -- data
			almost_empty_data : out std_logic;                                        -- data
			in_empty          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- empty
			out_empty         : out std_logic_vector(0 downto 0);                     -- empty
			in_error          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- error
			out_error         : out std_logic_vector(0 downto 0);                     -- error
			in_channel        : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- channel
			out_channel       : out std_logic_vector(0 downto 0)                      -- channel
		);
	end component altera_avalon_sc_fifo;

	component LPDDR2_s0_mm_interconnect_1_router is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(87 downto 0);                    -- data
			src_channel        : out std_logic_vector(1 downto 0);                     -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component LPDDR2_s0_mm_interconnect_1_router;

	component LPDDR2_s0_mm_interconnect_1_router_001 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(87 downto 0);                    -- data
			src_channel        : out std_logic_vector(1 downto 0);                     -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component LPDDR2_s0_mm_interconnect_1_router_001;

	component altera_merlin_traffic_limiter is
		generic (
			PKT_DEST_ID_H             : integer := 6;
			PKT_DEST_ID_L             : integer := 6;
			PKT_SRC_ID_H              : integer := 5;
			PKT_SRC_ID_L              : integer := 5;
			PKT_BYTE_CNT_H            : integer := 4;
			PKT_BYTE_CNT_L            : integer := 4;
			PKT_BYTEEN_H              : integer := 3;
			PKT_BYTEEN_L              : integer := 3;
			PKT_TRANS_POSTED          : integer := 1;
			PKT_TRANS_WRITE           : integer := 0;
			MAX_OUTSTANDING_RESPONSES : integer := 0;
			PIPELINED                 : integer := 0;
			ST_DATA_W                 : integer := 72;
			ST_CHANNEL_W              : integer := 1;
			VALID_WIDTH               : integer := 1;
			ENFORCE_ORDER             : integer := 1;
			PREVENT_HAZARDS           : integer := 0;
			SUPPORTS_POSTED_WRITES    : integer := 1;
			SUPPORTS_NONPOSTED_WRITES : integer := 0;
			REORDER                   : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			cmd_sink_ready         : out std_logic;                                        -- ready
			cmd_sink_valid         : in  std_logic                     := 'X';             -- valid
			cmd_sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			cmd_sink_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			cmd_sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			cmd_sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			cmd_src_ready          : in  std_logic                     := 'X';             -- ready
			cmd_src_data           : out std_logic_vector(87 downto 0);                    -- data
			cmd_src_channel        : out std_logic_vector(1 downto 0);                     -- channel
			cmd_src_startofpacket  : out std_logic;                                        -- startofpacket
			cmd_src_endofpacket    : out std_logic;                                        -- endofpacket
			rsp_sink_ready         : out std_logic;                                        -- ready
			rsp_sink_valid         : in  std_logic                     := 'X';             -- valid
			rsp_sink_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			rsp_sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			rsp_sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			rsp_sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			rsp_src_ready          : in  std_logic                     := 'X';             -- ready
			rsp_src_valid          : out std_logic;                                        -- valid
			rsp_src_data           : out std_logic_vector(87 downto 0);                    -- data
			rsp_src_channel        : out std_logic_vector(1 downto 0);                     -- channel
			rsp_src_startofpacket  : out std_logic;                                        -- startofpacket
			rsp_src_endofpacket    : out std_logic;                                        -- endofpacket
			cmd_src_valid          : out std_logic_vector(1 downto 0)                      -- data
		);
	end component altera_merlin_traffic_limiter;

	component LPDDR2_s0_mm_interconnect_1_cmd_demux is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- data
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(87 downto 0);                    -- data
			src0_channel       : out std_logic_vector(1 downto 0);                     -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic;                                        -- endofpacket
			src1_ready         : in  std_logic                     := 'X';             -- ready
			src1_valid         : out std_logic;                                        -- valid
			src1_data          : out std_logic_vector(87 downto 0);                    -- data
			src1_channel       : out std_logic_vector(1 downto 0);                     -- channel
			src1_startofpacket : out std_logic;                                        -- startofpacket
			src1_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component LPDDR2_s0_mm_interconnect_1_cmd_demux;

	component LPDDR2_s0_mm_interconnect_1_cmd_mux is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(87 downto 0);                    -- data
			src_channel         : out std_logic_vector(1 downto 0);                     -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component LPDDR2_s0_mm_interconnect_1_cmd_mux;

	component LPDDR2_s0_mm_interconnect_1_rsp_demux is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(87 downto 0);                    -- data
			src0_channel       : out std_logic_vector(1 downto 0);                     -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component LPDDR2_s0_mm_interconnect_1_rsp_demux;

	component LPDDR2_s0_mm_interconnect_1_rsp_mux is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(87 downto 0);                    -- data
			src_channel         : out std_logic_vector(1 downto 0);                     -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                        -- ready
			sink1_valid         : in  std_logic                     := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(87 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component LPDDR2_s0_mm_interconnect_1_rsp_mux;

	component LPDDR2_s0_mm_interconnect_0_avalon_st_adapter is
		generic (
			inBitsPerSymbol : integer := 8;
			inUsePackets    : integer := 0;
			inDataWidth     : integer := 8;
			inChannelWidth  : integer := 3;
			inErrorWidth    : integer := 2;
			inUseEmptyPort  : integer := 0;
			inUseValid      : integer := 1;
			inUseReady      : integer := 1;
			inReadyLatency  : integer := 0;
			outDataWidth    : integer := 32;
			outChannelWidth : integer := 3;
			outErrorWidth   : integer := 2;
			outUseEmptyPort : integer := 0;
			outUseValid     : integer := 1;
			outUseReady     : integer := 1;
			outReadyLatency : integer := 0
		);
		port (
			in_clk_0_clk   : in  std_logic                     := 'X';             -- clk
			in_rst_0_reset : in  std_logic                     := 'X';             -- reset
			in_0_data      : in  std_logic_vector(33 downto 0) := (others => 'X'); -- data
			in_0_valid     : in  std_logic                     := 'X';             -- valid
			in_0_ready     : out std_logic;                                        -- ready
			out_0_data     : out std_logic_vector(33 downto 0);                    -- data
			out_0_valid    : out std_logic;                                        -- valid
			out_0_ready    : in  std_logic                     := 'X';             -- ready
			out_0_error    : out std_logic_vector(0 downto 0)                      -- error
		);
	end component LPDDR2_s0_mm_interconnect_0_avalon_st_adapter;

	component lpddr2_s0_mm_interconnect_1_sequencer_scc_mgr_inst_avl_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             --                      clk.clk
			reset                  : in  std_logic                     := 'X';             --                    reset.reset
			uav_address            : in  std_logic_vector(17 downto 0) := (others => 'X'); -- avalon_universal_slave_0.address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); --                         .burstcount
			uav_read               : in  std_logic                     := 'X';             --                         .read
			uav_write              : in  std_logic                     := 'X';             --                         .write
			uav_waitrequest        : out std_logic;                                        --                         .waitrequest
			uav_readdatavalid      : out std_logic;                                        --                         .readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); --                         .byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    --                         .readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); --                         .writedata
			uav_lock               : in  std_logic                     := 'X';             --                         .lock
			uav_debugaccess        : in  std_logic                     := 'X';             --                         .debugaccess
			av_address             : out std_logic_vector(12 downto 0);                    --      avalon_anti_slave_0.address
			av_write               : out std_logic;                                        --                         .write
			av_read                : out std_logic;                                        --                         .read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); --                         .readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    --                         .writedata
			av_waitrequest         : in  std_logic                     := 'X';             --                         .waitrequest
			av_beginbursttransfer  : out std_logic;
			av_begintransfer       : out std_logic;
			av_burstcount          : out std_logic_vector(0 downto 0);
			av_byteenable          : out std_logic_vector(3 downto 0);
			av_chipselect          : out std_logic;
			av_clken               : out std_logic;
			av_debugaccess         : out std_logic;
			av_lock                : out std_logic;
			av_outputenable        : out std_logic;
			av_readdatavalid       : in  std_logic                     := 'X';
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X');
			av_writebyteenable     : out std_logic_vector(3 downto 0);
			av_writeresponsevalid  : in  std_logic                     := 'X';
			uav_clken              : in  std_logic                     := 'X';
			uav_response           : out std_logic_vector(1 downto 0);
			uav_writeresponsevalid : out std_logic
		);
	end component lpddr2_s0_mm_interconnect_1_sequencer_scc_mgr_inst_avl_translator;

	component lpddr2_s0_mm_interconnect_1_sequencer_reg_file_inst_avl_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             --                      clk.clk
			reset                  : in  std_logic                     := 'X';             --                    reset.reset
			uav_address            : in  std_logic_vector(17 downto 0) := (others => 'X'); -- avalon_universal_slave_0.address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); --                         .burstcount
			uav_read               : in  std_logic                     := 'X';             --                         .read
			uav_write              : in  std_logic                     := 'X';             --                         .write
			uav_waitrequest        : out std_logic;                                        --                         .waitrequest
			uav_readdatavalid      : out std_logic;                                        --                         .readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); --                         .byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    --                         .readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); --                         .writedata
			uav_lock               : in  std_logic                     := 'X';             --                         .lock
			uav_debugaccess        : in  std_logic                     := 'X';             --                         .debugaccess
			av_address             : out std_logic_vector(3 downto 0);                     --      avalon_anti_slave_0.address
			av_write               : out std_logic;                                        --                         .write
			av_read                : out std_logic;                                        --                         .read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); --                         .readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    --                         .writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     --                         .byteenable
			av_waitrequest         : in  std_logic                     := 'X';             --                         .waitrequest
			av_beginbursttransfer  : out std_logic;
			av_begintransfer       : out std_logic;
			av_burstcount          : out std_logic_vector(0 downto 0);
			av_chipselect          : out std_logic;
			av_clken               : out std_logic;
			av_debugaccess         : out std_logic;
			av_lock                : out std_logic;
			av_outputenable        : out std_logic;
			av_readdatavalid       : in  std_logic                     := 'X';
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X');
			av_writebyteenable     : out std_logic_vector(3 downto 0);
			av_writeresponsevalid  : in  std_logic                     := 'X';
			uav_clken              : in  std_logic                     := 'X';
			uav_response           : out std_logic_vector(1 downto 0);
			uav_writeresponsevalid : out std_logic
		);
	end component lpddr2_s0_mm_interconnect_1_sequencer_reg_file_inst_avl_translator;

	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_waitrequest   : std_logic;                     -- trk_mm_bridge_m0_agent:av_waitrequest -> trk_mm_bridge_m0_translator:uav_waitrequest
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_readdata      : std_logic_vector(31 downto 0); -- trk_mm_bridge_m0_agent:av_readdata -> trk_mm_bridge_m0_translator:uav_readdata
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_debugaccess   : std_logic;                     -- trk_mm_bridge_m0_translator:uav_debugaccess -> trk_mm_bridge_m0_agent:av_debugaccess
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_address       : std_logic_vector(17 downto 0); -- trk_mm_bridge_m0_translator:uav_address -> trk_mm_bridge_m0_agent:av_address
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_read          : std_logic;                     -- trk_mm_bridge_m0_translator:uav_read -> trk_mm_bridge_m0_agent:av_read
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_byteenable    : std_logic_vector(3 downto 0);  -- trk_mm_bridge_m0_translator:uav_byteenable -> trk_mm_bridge_m0_agent:av_byteenable
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid : std_logic;                     -- trk_mm_bridge_m0_agent:av_readdatavalid -> trk_mm_bridge_m0_translator:uav_readdatavalid
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_lock          : std_logic;                     -- trk_mm_bridge_m0_translator:uav_lock -> trk_mm_bridge_m0_agent:av_lock
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_write         : std_logic;                     -- trk_mm_bridge_m0_translator:uav_write -> trk_mm_bridge_m0_agent:av_write
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_writedata     : std_logic_vector(31 downto 0); -- trk_mm_bridge_m0_translator:uav_writedata -> trk_mm_bridge_m0_agent:av_writedata
	signal trk_mm_bridge_m0_translator_avalon_universal_master_0_burstcount    : std_logic_vector(2 downto 0);  -- trk_mm_bridge_m0_translator:uav_burstcount -> trk_mm_bridge_m0_agent:av_burstcount
	signal sequencer_scc_mgr_inst_avl_agent_m0_readdata                        : std_logic_vector(31 downto 0); -- sequencer_scc_mgr_inst_avl_translator:uav_readdata -> sequencer_scc_mgr_inst_avl_agent:m0_readdata
	signal sequencer_scc_mgr_inst_avl_agent_m0_waitrequest                     : std_logic;                     -- sequencer_scc_mgr_inst_avl_translator:uav_waitrequest -> sequencer_scc_mgr_inst_avl_agent:m0_waitrequest
	signal sequencer_scc_mgr_inst_avl_agent_m0_debugaccess                     : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:m0_debugaccess -> sequencer_scc_mgr_inst_avl_translator:uav_debugaccess
	signal sequencer_scc_mgr_inst_avl_agent_m0_address                         : std_logic_vector(17 downto 0); -- sequencer_scc_mgr_inst_avl_agent:m0_address -> sequencer_scc_mgr_inst_avl_translator:uav_address
	signal sequencer_scc_mgr_inst_avl_agent_m0_byteenable                      : std_logic_vector(3 downto 0);  -- sequencer_scc_mgr_inst_avl_agent:m0_byteenable -> sequencer_scc_mgr_inst_avl_translator:uav_byteenable
	signal sequencer_scc_mgr_inst_avl_agent_m0_read                            : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:m0_read -> sequencer_scc_mgr_inst_avl_translator:uav_read
	signal sequencer_scc_mgr_inst_avl_agent_m0_readdatavalid                   : std_logic;                     -- sequencer_scc_mgr_inst_avl_translator:uav_readdatavalid -> sequencer_scc_mgr_inst_avl_agent:m0_readdatavalid
	signal sequencer_scc_mgr_inst_avl_agent_m0_lock                            : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:m0_lock -> sequencer_scc_mgr_inst_avl_translator:uav_lock
	signal sequencer_scc_mgr_inst_avl_agent_m0_writedata                       : std_logic_vector(31 downto 0); -- sequencer_scc_mgr_inst_avl_agent:m0_writedata -> sequencer_scc_mgr_inst_avl_translator:uav_writedata
	signal sequencer_scc_mgr_inst_avl_agent_m0_write                           : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:m0_write -> sequencer_scc_mgr_inst_avl_translator:uav_write
	signal sequencer_scc_mgr_inst_avl_agent_m0_burstcount                      : std_logic_vector(2 downto 0);  -- sequencer_scc_mgr_inst_avl_agent:m0_burstcount -> sequencer_scc_mgr_inst_avl_translator:uav_burstcount
	signal sequencer_scc_mgr_inst_avl_agent_rf_source_valid                    : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rf_source_valid -> sequencer_scc_mgr_inst_avl_agent_rsp_fifo:in_valid
	signal sequencer_scc_mgr_inst_avl_agent_rf_source_data                     : std_logic_vector(88 downto 0); -- sequencer_scc_mgr_inst_avl_agent:rf_source_data -> sequencer_scc_mgr_inst_avl_agent_rsp_fifo:in_data
	signal sequencer_scc_mgr_inst_avl_agent_rf_source_ready                    : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent_rsp_fifo:in_ready -> sequencer_scc_mgr_inst_avl_agent:rf_source_ready
	signal sequencer_scc_mgr_inst_avl_agent_rf_source_startofpacket            : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rf_source_startofpacket -> sequencer_scc_mgr_inst_avl_agent_rsp_fifo:in_startofpacket
	signal sequencer_scc_mgr_inst_avl_agent_rf_source_endofpacket              : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rf_source_endofpacket -> sequencer_scc_mgr_inst_avl_agent_rsp_fifo:in_endofpacket
	signal sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_valid                 : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent_rsp_fifo:out_valid -> sequencer_scc_mgr_inst_avl_agent:rf_sink_valid
	signal sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_data                  : std_logic_vector(88 downto 0); -- sequencer_scc_mgr_inst_avl_agent_rsp_fifo:out_data -> sequencer_scc_mgr_inst_avl_agent:rf_sink_data
	signal sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_ready                 : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rf_sink_ready -> sequencer_scc_mgr_inst_avl_agent_rsp_fifo:out_ready
	signal sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_startofpacket         : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent_rsp_fifo:out_startofpacket -> sequencer_scc_mgr_inst_avl_agent:rf_sink_startofpacket
	signal sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_endofpacket           : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent_rsp_fifo:out_endofpacket -> sequencer_scc_mgr_inst_avl_agent:rf_sink_endofpacket
	signal cmd_mux_src_valid                                                   : std_logic;                     -- cmd_mux:src_valid -> sequencer_scc_mgr_inst_avl_agent:cp_valid
	signal cmd_mux_src_data                                                    : std_logic_vector(87 downto 0); -- cmd_mux:src_data -> sequencer_scc_mgr_inst_avl_agent:cp_data
	signal cmd_mux_src_ready                                                   : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:cp_ready -> cmd_mux:src_ready
	signal cmd_mux_src_channel                                                 : std_logic_vector(1 downto 0);  -- cmd_mux:src_channel -> sequencer_scc_mgr_inst_avl_agent:cp_channel
	signal cmd_mux_src_startofpacket                                           : std_logic;                     -- cmd_mux:src_startofpacket -> sequencer_scc_mgr_inst_avl_agent:cp_startofpacket
	signal cmd_mux_src_endofpacket                                             : std_logic;                     -- cmd_mux:src_endofpacket -> sequencer_scc_mgr_inst_avl_agent:cp_endofpacket
	signal sequencer_reg_file_inst_avl_agent_m0_readdata                       : std_logic_vector(31 downto 0); -- sequencer_reg_file_inst_avl_translator:uav_readdata -> sequencer_reg_file_inst_avl_agent:m0_readdata
	signal sequencer_reg_file_inst_avl_agent_m0_waitrequest                    : std_logic;                     -- sequencer_reg_file_inst_avl_translator:uav_waitrequest -> sequencer_reg_file_inst_avl_agent:m0_waitrequest
	signal sequencer_reg_file_inst_avl_agent_m0_debugaccess                    : std_logic;                     -- sequencer_reg_file_inst_avl_agent:m0_debugaccess -> sequencer_reg_file_inst_avl_translator:uav_debugaccess
	signal sequencer_reg_file_inst_avl_agent_m0_address                        : std_logic_vector(17 downto 0); -- sequencer_reg_file_inst_avl_agent:m0_address -> sequencer_reg_file_inst_avl_translator:uav_address
	signal sequencer_reg_file_inst_avl_agent_m0_byteenable                     : std_logic_vector(3 downto 0);  -- sequencer_reg_file_inst_avl_agent:m0_byteenable -> sequencer_reg_file_inst_avl_translator:uav_byteenable
	signal sequencer_reg_file_inst_avl_agent_m0_read                           : std_logic;                     -- sequencer_reg_file_inst_avl_agent:m0_read -> sequencer_reg_file_inst_avl_translator:uav_read
	signal sequencer_reg_file_inst_avl_agent_m0_readdatavalid                  : std_logic;                     -- sequencer_reg_file_inst_avl_translator:uav_readdatavalid -> sequencer_reg_file_inst_avl_agent:m0_readdatavalid
	signal sequencer_reg_file_inst_avl_agent_m0_lock                           : std_logic;                     -- sequencer_reg_file_inst_avl_agent:m0_lock -> sequencer_reg_file_inst_avl_translator:uav_lock
	signal sequencer_reg_file_inst_avl_agent_m0_writedata                      : std_logic_vector(31 downto 0); -- sequencer_reg_file_inst_avl_agent:m0_writedata -> sequencer_reg_file_inst_avl_translator:uav_writedata
	signal sequencer_reg_file_inst_avl_agent_m0_write                          : std_logic;                     -- sequencer_reg_file_inst_avl_agent:m0_write -> sequencer_reg_file_inst_avl_translator:uav_write
	signal sequencer_reg_file_inst_avl_agent_m0_burstcount                     : std_logic_vector(2 downto 0);  -- sequencer_reg_file_inst_avl_agent:m0_burstcount -> sequencer_reg_file_inst_avl_translator:uav_burstcount
	signal sequencer_reg_file_inst_avl_agent_rf_source_valid                   : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rf_source_valid -> sequencer_reg_file_inst_avl_agent_rsp_fifo:in_valid
	signal sequencer_reg_file_inst_avl_agent_rf_source_data                    : std_logic_vector(88 downto 0); -- sequencer_reg_file_inst_avl_agent:rf_source_data -> sequencer_reg_file_inst_avl_agent_rsp_fifo:in_data
	signal sequencer_reg_file_inst_avl_agent_rf_source_ready                   : std_logic;                     -- sequencer_reg_file_inst_avl_agent_rsp_fifo:in_ready -> sequencer_reg_file_inst_avl_agent:rf_source_ready
	signal sequencer_reg_file_inst_avl_agent_rf_source_startofpacket           : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rf_source_startofpacket -> sequencer_reg_file_inst_avl_agent_rsp_fifo:in_startofpacket
	signal sequencer_reg_file_inst_avl_agent_rf_source_endofpacket             : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rf_source_endofpacket -> sequencer_reg_file_inst_avl_agent_rsp_fifo:in_endofpacket
	signal sequencer_reg_file_inst_avl_agent_rsp_fifo_out_valid                : std_logic;                     -- sequencer_reg_file_inst_avl_agent_rsp_fifo:out_valid -> sequencer_reg_file_inst_avl_agent:rf_sink_valid
	signal sequencer_reg_file_inst_avl_agent_rsp_fifo_out_data                 : std_logic_vector(88 downto 0); -- sequencer_reg_file_inst_avl_agent_rsp_fifo:out_data -> sequencer_reg_file_inst_avl_agent:rf_sink_data
	signal sequencer_reg_file_inst_avl_agent_rsp_fifo_out_ready                : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rf_sink_ready -> sequencer_reg_file_inst_avl_agent_rsp_fifo:out_ready
	signal sequencer_reg_file_inst_avl_agent_rsp_fifo_out_startofpacket        : std_logic;                     -- sequencer_reg_file_inst_avl_agent_rsp_fifo:out_startofpacket -> sequencer_reg_file_inst_avl_agent:rf_sink_startofpacket
	signal sequencer_reg_file_inst_avl_agent_rsp_fifo_out_endofpacket          : std_logic;                     -- sequencer_reg_file_inst_avl_agent_rsp_fifo:out_endofpacket -> sequencer_reg_file_inst_avl_agent:rf_sink_endofpacket
	signal cmd_mux_001_src_valid                                               : std_logic;                     -- cmd_mux_001:src_valid -> sequencer_reg_file_inst_avl_agent:cp_valid
	signal cmd_mux_001_src_data                                                : std_logic_vector(87 downto 0); -- cmd_mux_001:src_data -> sequencer_reg_file_inst_avl_agent:cp_data
	signal cmd_mux_001_src_ready                                               : std_logic;                     -- sequencer_reg_file_inst_avl_agent:cp_ready -> cmd_mux_001:src_ready
	signal cmd_mux_001_src_channel                                             : std_logic_vector(1 downto 0);  -- cmd_mux_001:src_channel -> sequencer_reg_file_inst_avl_agent:cp_channel
	signal cmd_mux_001_src_startofpacket                                       : std_logic;                     -- cmd_mux_001:src_startofpacket -> sequencer_reg_file_inst_avl_agent:cp_startofpacket
	signal cmd_mux_001_src_endofpacket                                         : std_logic;                     -- cmd_mux_001:src_endofpacket -> sequencer_reg_file_inst_avl_agent:cp_endofpacket
	signal trk_mm_bridge_m0_agent_cp_valid                                     : std_logic;                     -- trk_mm_bridge_m0_agent:cp_valid -> router:sink_valid
	signal trk_mm_bridge_m0_agent_cp_data                                      : std_logic_vector(87 downto 0); -- trk_mm_bridge_m0_agent:cp_data -> router:sink_data
	signal trk_mm_bridge_m0_agent_cp_ready                                     : std_logic;                     -- router:sink_ready -> trk_mm_bridge_m0_agent:cp_ready
	signal trk_mm_bridge_m0_agent_cp_startofpacket                             : std_logic;                     -- trk_mm_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	signal trk_mm_bridge_m0_agent_cp_endofpacket                               : std_logic;                     -- trk_mm_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	signal sequencer_scc_mgr_inst_avl_agent_rp_valid                           : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rp_valid -> router_001:sink_valid
	signal sequencer_scc_mgr_inst_avl_agent_rp_data                            : std_logic_vector(87 downto 0); -- sequencer_scc_mgr_inst_avl_agent:rp_data -> router_001:sink_data
	signal sequencer_scc_mgr_inst_avl_agent_rp_ready                           : std_logic;                     -- router_001:sink_ready -> sequencer_scc_mgr_inst_avl_agent:rp_ready
	signal sequencer_scc_mgr_inst_avl_agent_rp_startofpacket                   : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rp_startofpacket -> router_001:sink_startofpacket
	signal sequencer_scc_mgr_inst_avl_agent_rp_endofpacket                     : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rp_endofpacket -> router_001:sink_endofpacket
	signal router_001_src_valid                                                : std_logic;                     -- router_001:src_valid -> rsp_demux:sink_valid
	signal router_001_src_data                                                 : std_logic_vector(87 downto 0); -- router_001:src_data -> rsp_demux:sink_data
	signal router_001_src_ready                                                : std_logic;                     -- rsp_demux:sink_ready -> router_001:src_ready
	signal router_001_src_channel                                              : std_logic_vector(1 downto 0);  -- router_001:src_channel -> rsp_demux:sink_channel
	signal router_001_src_startofpacket                                        : std_logic;                     -- router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	signal router_001_src_endofpacket                                          : std_logic;                     -- router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	signal sequencer_reg_file_inst_avl_agent_rp_valid                          : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rp_valid -> router_002:sink_valid
	signal sequencer_reg_file_inst_avl_agent_rp_data                           : std_logic_vector(87 downto 0); -- sequencer_reg_file_inst_avl_agent:rp_data -> router_002:sink_data
	signal sequencer_reg_file_inst_avl_agent_rp_ready                          : std_logic;                     -- router_002:sink_ready -> sequencer_reg_file_inst_avl_agent:rp_ready
	signal sequencer_reg_file_inst_avl_agent_rp_startofpacket                  : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rp_startofpacket -> router_002:sink_startofpacket
	signal sequencer_reg_file_inst_avl_agent_rp_endofpacket                    : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rp_endofpacket -> router_002:sink_endofpacket
	signal router_002_src_valid                                                : std_logic;                     -- router_002:src_valid -> rsp_demux_001:sink_valid
	signal router_002_src_data                                                 : std_logic_vector(87 downto 0); -- router_002:src_data -> rsp_demux_001:sink_data
	signal router_002_src_ready                                                : std_logic;                     -- rsp_demux_001:sink_ready -> router_002:src_ready
	signal router_002_src_channel                                              : std_logic_vector(1 downto 0);  -- router_002:src_channel -> rsp_demux_001:sink_channel
	signal router_002_src_startofpacket                                        : std_logic;                     -- router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	signal router_002_src_endofpacket                                          : std_logic;                     -- router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	signal router_src_valid                                                    : std_logic;                     -- router:src_valid -> trk_mm_bridge_m0_limiter:cmd_sink_valid
	signal router_src_data                                                     : std_logic_vector(87 downto 0); -- router:src_data -> trk_mm_bridge_m0_limiter:cmd_sink_data
	signal router_src_ready                                                    : std_logic;                     -- trk_mm_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	signal router_src_channel                                                  : std_logic_vector(1 downto 0);  -- router:src_channel -> trk_mm_bridge_m0_limiter:cmd_sink_channel
	signal router_src_startofpacket                                            : std_logic;                     -- router:src_startofpacket -> trk_mm_bridge_m0_limiter:cmd_sink_startofpacket
	signal router_src_endofpacket                                              : std_logic;                     -- router:src_endofpacket -> trk_mm_bridge_m0_limiter:cmd_sink_endofpacket
	signal trk_mm_bridge_m0_limiter_cmd_src_data                               : std_logic_vector(87 downto 0); -- trk_mm_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	signal trk_mm_bridge_m0_limiter_cmd_src_ready                              : std_logic;                     -- cmd_demux:sink_ready -> trk_mm_bridge_m0_limiter:cmd_src_ready
	signal trk_mm_bridge_m0_limiter_cmd_src_channel                            : std_logic_vector(1 downto 0);  -- trk_mm_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	signal trk_mm_bridge_m0_limiter_cmd_src_startofpacket                      : std_logic;                     -- trk_mm_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	signal trk_mm_bridge_m0_limiter_cmd_src_endofpacket                        : std_logic;                     -- trk_mm_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	signal rsp_mux_src_valid                                                   : std_logic;                     -- rsp_mux:src_valid -> trk_mm_bridge_m0_limiter:rsp_sink_valid
	signal rsp_mux_src_data                                                    : std_logic_vector(87 downto 0); -- rsp_mux:src_data -> trk_mm_bridge_m0_limiter:rsp_sink_data
	signal rsp_mux_src_ready                                                   : std_logic;                     -- trk_mm_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	signal rsp_mux_src_channel                                                 : std_logic_vector(1 downto 0);  -- rsp_mux:src_channel -> trk_mm_bridge_m0_limiter:rsp_sink_channel
	signal rsp_mux_src_startofpacket                                           : std_logic;                     -- rsp_mux:src_startofpacket -> trk_mm_bridge_m0_limiter:rsp_sink_startofpacket
	signal rsp_mux_src_endofpacket                                             : std_logic;                     -- rsp_mux:src_endofpacket -> trk_mm_bridge_m0_limiter:rsp_sink_endofpacket
	signal trk_mm_bridge_m0_limiter_rsp_src_valid                              : std_logic;                     -- trk_mm_bridge_m0_limiter:rsp_src_valid -> trk_mm_bridge_m0_agent:rp_valid
	signal trk_mm_bridge_m0_limiter_rsp_src_data                               : std_logic_vector(87 downto 0); -- trk_mm_bridge_m0_limiter:rsp_src_data -> trk_mm_bridge_m0_agent:rp_data
	signal trk_mm_bridge_m0_limiter_rsp_src_ready                              : std_logic;                     -- trk_mm_bridge_m0_agent:rp_ready -> trk_mm_bridge_m0_limiter:rsp_src_ready
	signal trk_mm_bridge_m0_limiter_rsp_src_channel                            : std_logic_vector(1 downto 0);  -- trk_mm_bridge_m0_limiter:rsp_src_channel -> trk_mm_bridge_m0_agent:rp_channel
	signal trk_mm_bridge_m0_limiter_rsp_src_startofpacket                      : std_logic;                     -- trk_mm_bridge_m0_limiter:rsp_src_startofpacket -> trk_mm_bridge_m0_agent:rp_startofpacket
	signal trk_mm_bridge_m0_limiter_rsp_src_endofpacket                        : std_logic;                     -- trk_mm_bridge_m0_limiter:rsp_src_endofpacket -> trk_mm_bridge_m0_agent:rp_endofpacket
	signal cmd_demux_src0_valid                                                : std_logic;                     -- cmd_demux:src0_valid -> cmd_mux:sink0_valid
	signal cmd_demux_src0_data                                                 : std_logic_vector(87 downto 0); -- cmd_demux:src0_data -> cmd_mux:sink0_data
	signal cmd_demux_src0_ready                                                : std_logic;                     -- cmd_mux:sink0_ready -> cmd_demux:src0_ready
	signal cmd_demux_src0_channel                                              : std_logic_vector(1 downto 0);  -- cmd_demux:src0_channel -> cmd_mux:sink0_channel
	signal cmd_demux_src0_startofpacket                                        : std_logic;                     -- cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	signal cmd_demux_src0_endofpacket                                          : std_logic;                     -- cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	signal cmd_demux_src1_valid                                                : std_logic;                     -- cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	signal cmd_demux_src1_data                                                 : std_logic_vector(87 downto 0); -- cmd_demux:src1_data -> cmd_mux_001:sink0_data
	signal cmd_demux_src1_ready                                                : std_logic;                     -- cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	signal cmd_demux_src1_channel                                              : std_logic_vector(1 downto 0);  -- cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	signal cmd_demux_src1_startofpacket                                        : std_logic;                     -- cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	signal cmd_demux_src1_endofpacket                                          : std_logic;                     -- cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	signal rsp_demux_src0_valid                                                : std_logic;                     -- rsp_demux:src0_valid -> rsp_mux:sink0_valid
	signal rsp_demux_src0_data                                                 : std_logic_vector(87 downto 0); -- rsp_demux:src0_data -> rsp_mux:sink0_data
	signal rsp_demux_src0_ready                                                : std_logic;                     -- rsp_mux:sink0_ready -> rsp_demux:src0_ready
	signal rsp_demux_src0_channel                                              : std_logic_vector(1 downto 0);  -- rsp_demux:src0_channel -> rsp_mux:sink0_channel
	signal rsp_demux_src0_startofpacket                                        : std_logic;                     -- rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	signal rsp_demux_src0_endofpacket                                          : std_logic;                     -- rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	signal rsp_demux_001_src0_valid                                            : std_logic;                     -- rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	signal rsp_demux_001_src0_data                                             : std_logic_vector(87 downto 0); -- rsp_demux_001:src0_data -> rsp_mux:sink1_data
	signal rsp_demux_001_src0_ready                                            : std_logic;                     -- rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	signal rsp_demux_001_src0_channel                                          : std_logic_vector(1 downto 0);  -- rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	signal rsp_demux_001_src0_startofpacket                                    : std_logic;                     -- rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	signal rsp_demux_001_src0_endofpacket                                      : std_logic;                     -- rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	signal trk_mm_bridge_m0_limiter_cmd_valid_data                             : std_logic_vector(1 downto 0);  -- trk_mm_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	signal sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_valid               : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	signal sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_data                : std_logic_vector(33 downto 0); -- sequencer_scc_mgr_inst_avl_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	signal sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_ready               : std_logic;                     -- avalon_st_adapter:in_0_ready -> sequencer_scc_mgr_inst_avl_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_out_0_valid                                       : std_logic;                     -- avalon_st_adapter:out_0_valid -> sequencer_scc_mgr_inst_avl_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_out_0_data                                        : std_logic_vector(33 downto 0); -- avalon_st_adapter:out_0_data -> sequencer_scc_mgr_inst_avl_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_out_0_ready                                       : std_logic;                     -- sequencer_scc_mgr_inst_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	signal avalon_st_adapter_out_0_error                                       : std_logic_vector(0 downto 0);  -- avalon_st_adapter:out_0_error -> sequencer_scc_mgr_inst_avl_agent:rdata_fifo_sink_error
	signal sequencer_reg_file_inst_avl_agent_rdata_fifo_src_valid              : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	signal sequencer_reg_file_inst_avl_agent_rdata_fifo_src_data               : std_logic_vector(33 downto 0); -- sequencer_reg_file_inst_avl_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	signal sequencer_reg_file_inst_avl_agent_rdata_fifo_src_ready              : std_logic;                     -- avalon_st_adapter_001:in_0_ready -> sequencer_reg_file_inst_avl_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_001_out_0_valid                                   : std_logic;                     -- avalon_st_adapter_001:out_0_valid -> sequencer_reg_file_inst_avl_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_001_out_0_data                                    : std_logic_vector(33 downto 0); -- avalon_st_adapter_001:out_0_data -> sequencer_reg_file_inst_avl_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_001_out_0_ready                                   : std_logic;                     -- sequencer_reg_file_inst_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	signal avalon_st_adapter_001_out_0_error                                   : std_logic_vector(0 downto 0);  -- avalon_st_adapter_001:out_0_error -> sequencer_reg_file_inst_avl_agent:rdata_fifo_sink_error

begin

	trk_mm_bridge_m0_translator : component altera_merlin_master_translator
		generic map (
			AV_ADDRESS_W                => 16,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 18,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 1,
			USE_READDATAVALID           => 1,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 0,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                    => avl_clk_out_clk_clk,                                                 --                       clk.clk
			reset                  => trk_mm_bridge_reset_reset_bridge_in_reset_reset,                     --                     reset.reset
			uav_address            => trk_mm_bridge_m0_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => trk_mm_bridge_m0_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => trk_mm_bridge_m0_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => trk_mm_bridge_m0_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => trk_mm_bridge_m0_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => trk_mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => trk_mm_bridge_m0_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => trk_mm_bridge_m0_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => trk_mm_bridge_m0_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => trk_mm_bridge_m0_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => trk_mm_bridge_m0_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => trk_mm_bridge_m0_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => trk_mm_bridge_m0_waitrequest,                                        --                          .waitrequest
			av_burstcount          => trk_mm_bridge_m0_burstcount,                                         --                          .burstcount
			av_byteenable          => trk_mm_bridge_m0_byteenable,                                         --                          .byteenable
			av_read                => trk_mm_bridge_m0_read,                                               --                          .read
			av_readdata            => trk_mm_bridge_m0_readdata,                                           --                          .readdata
			av_readdatavalid       => trk_mm_bridge_m0_readdatavalid,                                      --                          .readdatavalid
			av_write               => trk_mm_bridge_m0_write,                                              --                          .write
			av_writedata           => trk_mm_bridge_m0_writedata,                                          --                          .writedata
			av_debugaccess         => trk_mm_bridge_m0_debugaccess,                                        --                          .debugaccess
			av_beginbursttransfer  => '0',                                                                 --               (terminated)
			av_begintransfer       => '0',                                                                 --               (terminated)
			av_chipselect          => '0',                                                                 --               (terminated)
			av_lock                => '0',                                                                 --               (terminated)
			uav_clken              => open,                                                                --               (terminated)
			av_clken               => '1',                                                                 --               (terminated)
			uav_response           => "00",                                                                --               (terminated)
			av_response            => open,                                                                --               (terminated)
			uav_writeresponsevalid => '0',                                                                 --               (terminated)
			av_writeresponsevalid  => open                                                                 --               (terminated)
		);

	sequencer_scc_mgr_inst_avl_translator : component lpddr2_s0_mm_interconnect_1_sequencer_scc_mgr_inst_avl_translator
		generic map (
			AV_ADDRESS_W                   => 13,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 18,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => avl_clk_out_clk_clk,                               --                      clk.clk
			reset                  => trk_mm_bridge_reset_reset_bridge_in_reset_reset,   --                    reset.reset
			uav_address            => sequencer_scc_mgr_inst_avl_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => sequencer_scc_mgr_inst_avl_agent_m0_burstcount,    --                         .burstcount
			uav_read               => sequencer_scc_mgr_inst_avl_agent_m0_read,          --                         .read
			uav_write              => sequencer_scc_mgr_inst_avl_agent_m0_write,         --                         .write
			uav_waitrequest        => sequencer_scc_mgr_inst_avl_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => sequencer_scc_mgr_inst_avl_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => sequencer_scc_mgr_inst_avl_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => sequencer_scc_mgr_inst_avl_agent_m0_readdata,      --                         .readdata
			uav_writedata          => sequencer_scc_mgr_inst_avl_agent_m0_writedata,     --                         .writedata
			uav_lock               => sequencer_scc_mgr_inst_avl_agent_m0_lock,          --                         .lock
			uav_debugaccess        => sequencer_scc_mgr_inst_avl_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => sequencer_scc_mgr_inst_avl_address,                --      avalon_anti_slave_0.address
			av_write               => sequencer_scc_mgr_inst_avl_write,                  --                         .write
			av_read                => sequencer_scc_mgr_inst_avl_read,                   --                         .read
			av_readdata            => sequencer_scc_mgr_inst_avl_readdata,               --                         .readdata
			av_writedata           => sequencer_scc_mgr_inst_avl_writedata,              --                         .writedata
			av_waitrequest         => sequencer_scc_mgr_inst_avl_waitrequest,            --                         .waitrequest
			av_begintransfer       => open,                                              --              (terminated)
			av_beginbursttransfer  => open,                                              --              (terminated)
			av_burstcount          => open,                                              --              (terminated)
			av_byteenable          => open,                                              --              (terminated)
			av_readdatavalid       => '0',                                               --              (terminated)
			av_writebyteenable     => open,                                              --              (terminated)
			av_lock                => open,                                              --              (terminated)
			av_chipselect          => open,                                              --              (terminated)
			av_clken               => open,                                              --              (terminated)
			uav_clken              => '0',                                               --              (terminated)
			av_debugaccess         => open,                                              --              (terminated)
			av_outputenable        => open,                                              --              (terminated)
			uav_response           => open,                                              --              (terminated)
			av_response            => "00",                                              --              (terminated)
			uav_writeresponsevalid => open,                                              --              (terminated)
			av_writeresponsevalid  => '0'                                                --              (terminated)
		);

	sequencer_reg_file_inst_avl_translator : component lpddr2_s0_mm_interconnect_1_sequencer_reg_file_inst_avl_translator
		generic map (
			AV_ADDRESS_W                   => 4,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 18,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => avl_clk_out_clk_clk,                                --                      clk.clk
			reset                  => trk_mm_bridge_reset_reset_bridge_in_reset_reset,    --                    reset.reset
			uav_address            => sequencer_reg_file_inst_avl_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => sequencer_reg_file_inst_avl_agent_m0_burstcount,    --                         .burstcount
			uav_read               => sequencer_reg_file_inst_avl_agent_m0_read,          --                         .read
			uav_write              => sequencer_reg_file_inst_avl_agent_m0_write,         --                         .write
			uav_waitrequest        => sequencer_reg_file_inst_avl_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => sequencer_reg_file_inst_avl_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => sequencer_reg_file_inst_avl_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => sequencer_reg_file_inst_avl_agent_m0_readdata,      --                         .readdata
			uav_writedata          => sequencer_reg_file_inst_avl_agent_m0_writedata,     --                         .writedata
			uav_lock               => sequencer_reg_file_inst_avl_agent_m0_lock,          --                         .lock
			uav_debugaccess        => sequencer_reg_file_inst_avl_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => sequencer_reg_file_inst_avl_address,                --      avalon_anti_slave_0.address
			av_write               => sequencer_reg_file_inst_avl_write,                  --                         .write
			av_read                => sequencer_reg_file_inst_avl_read,                   --                         .read
			av_readdata            => sequencer_reg_file_inst_avl_readdata,               --                         .readdata
			av_writedata           => sequencer_reg_file_inst_avl_writedata,              --                         .writedata
			av_byteenable          => sequencer_reg_file_inst_avl_byteenable,             --                         .byteenable
			av_waitrequest         => sequencer_reg_file_inst_avl_waitrequest,            --                         .waitrequest
			av_begintransfer       => open,                                               --              (terminated)
			av_beginbursttransfer  => open,                                               --              (terminated)
			av_burstcount          => open,                                               --              (terminated)
			av_readdatavalid       => '0',                                                --              (terminated)
			av_writebyteenable     => open,                                               --              (terminated)
			av_lock                => open,                                               --              (terminated)
			av_chipselect          => open,                                               --              (terminated)
			av_clken               => open,                                               --              (terminated)
			uav_clken              => '0',                                                --              (terminated)
			av_debugaccess         => open,                                               --              (terminated)
			av_outputenable        => open,                                               --              (terminated)
			uav_response           => open,                                               --              (terminated)
			av_response            => "00",                                               --              (terminated)
			uav_writeresponsevalid => open,                                               --              (terminated)
			av_writeresponsevalid  => '0'                                                 --              (terminated)
		);

	trk_mm_bridge_m0_agent : component altera_merlin_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 87,
			PKT_ORI_BURST_SIZE_L      => 85,
			PKT_RESPONSE_STATUS_H     => 84,
			PKT_RESPONSE_STATUS_L     => 83,
			PKT_QOS_H                 => 72,
			PKT_QOS_L                 => 72,
			PKT_DATA_SIDEBAND_H       => 70,
			PKT_DATA_SIDEBAND_L       => 70,
			PKT_ADDR_SIDEBAND_H       => 69,
			PKT_ADDR_SIDEBAND_L       => 69,
			PKT_BURST_TYPE_H          => 68,
			PKT_BURST_TYPE_L          => 67,
			PKT_CACHE_H               => 82,
			PKT_CACHE_L               => 79,
			PKT_THREAD_ID_H           => 75,
			PKT_THREAD_ID_L           => 75,
			PKT_BURST_SIZE_H          => 66,
			PKT_BURST_SIZE_L          => 64,
			PKT_TRANS_EXCLUSIVE       => 59,
			PKT_TRANS_LOCK            => 58,
			PKT_BEGIN_BURST           => 71,
			PKT_PROTECTION_H          => 78,
			PKT_PROTECTION_L          => 76,
			PKT_BURSTWRAP_H           => 63,
			PKT_BURSTWRAP_L           => 63,
			PKT_BYTE_CNT_H            => 62,
			PKT_BYTE_CNT_L            => 60,
			PKT_ADDR_H                => 53,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 54,
			PKT_TRANS_POSTED          => 55,
			PKT_TRANS_WRITE           => 56,
			PKT_TRANS_READ            => 57,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 73,
			PKT_SRC_ID_L              => 73,
			PKT_DEST_ID_H             => 74,
			PKT_DEST_ID_L             => 74,
			ST_DATA_W                 => 88,
			ST_CHANNEL_W              => 2,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 0,
			BURSTWRAP_VALUE           => 1,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => avl_clk_out_clk_clk,                                                 --       clk.clk
			reset                 => trk_mm_bridge_reset_reset_bridge_in_reset_reset,                     -- clk_reset.reset
			av_address            => trk_mm_bridge_m0_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => trk_mm_bridge_m0_translator_avalon_universal_master_0_write,         --          .write
			av_read               => trk_mm_bridge_m0_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => trk_mm_bridge_m0_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => trk_mm_bridge_m0_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => trk_mm_bridge_m0_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => trk_mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => trk_mm_bridge_m0_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => trk_mm_bridge_m0_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => trk_mm_bridge_m0_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => trk_mm_bridge_m0_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => trk_mm_bridge_m0_agent_cp_valid,                                     --        cp.valid
			cp_data               => trk_mm_bridge_m0_agent_cp_data,                                      --          .data
			cp_startofpacket      => trk_mm_bridge_m0_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => trk_mm_bridge_m0_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => trk_mm_bridge_m0_agent_cp_ready,                                     --          .ready
			rp_valid              => trk_mm_bridge_m0_limiter_rsp_src_valid,                              --        rp.valid
			rp_data               => trk_mm_bridge_m0_limiter_rsp_src_data,                               --          .data
			rp_channel            => trk_mm_bridge_m0_limiter_rsp_src_channel,                            --          .channel
			rp_startofpacket      => trk_mm_bridge_m0_limiter_rsp_src_startofpacket,                      --          .startofpacket
			rp_endofpacket        => trk_mm_bridge_m0_limiter_rsp_src_endofpacket,                        --          .endofpacket
			rp_ready              => trk_mm_bridge_m0_limiter_rsp_src_ready,                              --          .ready
			av_response           => open,                                                                -- (terminated)
			av_writeresponsevalid => open                                                                 -- (terminated)
		);

	sequencer_scc_mgr_inst_avl_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 87,
			PKT_ORI_BURST_SIZE_L      => 85,
			PKT_RESPONSE_STATUS_H     => 84,
			PKT_RESPONSE_STATUS_L     => 83,
			PKT_BURST_SIZE_H          => 66,
			PKT_BURST_SIZE_L          => 64,
			PKT_TRANS_LOCK            => 58,
			PKT_BEGIN_BURST           => 71,
			PKT_PROTECTION_H          => 78,
			PKT_PROTECTION_L          => 76,
			PKT_BURSTWRAP_H           => 63,
			PKT_BURSTWRAP_L           => 63,
			PKT_BYTE_CNT_H            => 62,
			PKT_BYTE_CNT_L            => 60,
			PKT_ADDR_H                => 53,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 54,
			PKT_TRANS_POSTED          => 55,
			PKT_TRANS_WRITE           => 56,
			PKT_TRANS_READ            => 57,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 73,
			PKT_SRC_ID_L              => 73,
			PKT_DEST_ID_H             => 74,
			PKT_DEST_ID_L             => 74,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 2,
			ST_DATA_W                 => 88,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => avl_clk_out_clk_clk,                                         --             clk.clk
			reset                   => trk_mm_bridge_reset_reset_bridge_in_reset_reset,             --       clk_reset.reset
			m0_address              => sequencer_scc_mgr_inst_avl_agent_m0_address,                 --              m0.address
			m0_burstcount           => sequencer_scc_mgr_inst_avl_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => sequencer_scc_mgr_inst_avl_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => sequencer_scc_mgr_inst_avl_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => sequencer_scc_mgr_inst_avl_agent_m0_lock,                    --                .lock
			m0_readdata             => sequencer_scc_mgr_inst_avl_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => sequencer_scc_mgr_inst_avl_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => sequencer_scc_mgr_inst_avl_agent_m0_read,                    --                .read
			m0_waitrequest          => sequencer_scc_mgr_inst_avl_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => sequencer_scc_mgr_inst_avl_agent_m0_writedata,               --                .writedata
			m0_write                => sequencer_scc_mgr_inst_avl_agent_m0_write,                   --                .write
			rp_endofpacket          => sequencer_scc_mgr_inst_avl_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => sequencer_scc_mgr_inst_avl_agent_rp_ready,                   --                .ready
			rp_valid                => sequencer_scc_mgr_inst_avl_agent_rp_valid,                   --                .valid
			rp_data                 => sequencer_scc_mgr_inst_avl_agent_rp_data,                    --                .data
			rp_startofpacket        => sequencer_scc_mgr_inst_avl_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_src_ready,                                           --              cp.ready
			cp_valid                => cmd_mux_src_valid,                                           --                .valid
			cp_data                 => cmd_mux_src_data,                                            --                .data
			cp_startofpacket        => cmd_mux_src_startofpacket,                                   --                .startofpacket
			cp_endofpacket          => cmd_mux_src_endofpacket,                                     --                .endofpacket
			cp_channel              => cmd_mux_src_channel,                                         --                .channel
			rf_sink_ready           => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => sequencer_scc_mgr_inst_avl_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => sequencer_scc_mgr_inst_avl_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => sequencer_scc_mgr_inst_avl_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => sequencer_scc_mgr_inst_avl_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => sequencer_scc_mgr_inst_avl_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_out_0_ready,                               -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_out_0_valid,                               --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_out_0_data,                                --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_out_0_error(0),                            --                .error
			rdata_fifo_src_ready    => sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                        --     (terminated)
			m0_writeresponsevalid   => '0'                                                          --     (terminated)
		);

	sequencer_scc_mgr_inst_avl_agent_rsp_fifo : component altera_avalon_sc_fifo
		generic map (
			SYMBOLS_PER_BEAT    => 1,
			BITS_PER_SYMBOL     => 89,
			FIFO_DEPTH          => 2,
			CHANNEL_WIDTH       => 0,
			ERROR_WIDTH         => 0,
			USE_PACKETS         => 1,
			USE_FILL_LEVEL      => 0,
			EMPTY_LATENCY       => 1,
			USE_MEMORY_BLOCKS   => 0,
			USE_STORE_FORWARD   => 0,
			USE_ALMOST_FULL_IF  => 0,
			USE_ALMOST_EMPTY_IF => 0
		)
		port map (
			clk               => avl_clk_out_clk_clk,                                         --       clk.clk
			reset             => trk_mm_bridge_reset_reset_bridge_in_reset_reset,             -- clk_reset.reset
			in_data           => sequencer_scc_mgr_inst_avl_agent_rf_source_data,             --        in.data
			in_valid          => sequencer_scc_mgr_inst_avl_agent_rf_source_valid,            --          .valid
			in_ready          => sequencer_scc_mgr_inst_avl_agent_rf_source_ready,            --          .ready
			in_startofpacket  => sequencer_scc_mgr_inst_avl_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => sequencer_scc_mgr_inst_avl_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => sequencer_scc_mgr_inst_avl_agent_rsp_fifo_out_endofpacket,   --          .endofpacket
			csr_address       => "00",                                                        -- (terminated)
			csr_read          => '0',                                                         -- (terminated)
			csr_write         => '0',                                                         -- (terminated)
			csr_readdata      => open,                                                        -- (terminated)
			csr_writedata     => "00000000000000000000000000000000",                          -- (terminated)
			almost_full_data  => open,                                                        -- (terminated)
			almost_empty_data => open,                                                        -- (terminated)
			in_empty          => "0",                                                         -- (terminated)
			out_empty         => open,                                                        -- (terminated)
			in_error          => "0",                                                         -- (terminated)
			out_error         => open,                                                        -- (terminated)
			in_channel        => "0",                                                         -- (terminated)
			out_channel       => open                                                         -- (terminated)
		);

	sequencer_reg_file_inst_avl_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 87,
			PKT_ORI_BURST_SIZE_L      => 85,
			PKT_RESPONSE_STATUS_H     => 84,
			PKT_RESPONSE_STATUS_L     => 83,
			PKT_BURST_SIZE_H          => 66,
			PKT_BURST_SIZE_L          => 64,
			PKT_TRANS_LOCK            => 58,
			PKT_BEGIN_BURST           => 71,
			PKT_PROTECTION_H          => 78,
			PKT_PROTECTION_L          => 76,
			PKT_BURSTWRAP_H           => 63,
			PKT_BURSTWRAP_L           => 63,
			PKT_BYTE_CNT_H            => 62,
			PKT_BYTE_CNT_L            => 60,
			PKT_ADDR_H                => 53,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 54,
			PKT_TRANS_POSTED          => 55,
			PKT_TRANS_WRITE           => 56,
			PKT_TRANS_READ            => 57,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 73,
			PKT_SRC_ID_L              => 73,
			PKT_DEST_ID_H             => 74,
			PKT_DEST_ID_L             => 74,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 2,
			ST_DATA_W                 => 88,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => avl_clk_out_clk_clk,                                          --             clk.clk
			reset                   => trk_mm_bridge_reset_reset_bridge_in_reset_reset,              --       clk_reset.reset
			m0_address              => sequencer_reg_file_inst_avl_agent_m0_address,                 --              m0.address
			m0_burstcount           => sequencer_reg_file_inst_avl_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => sequencer_reg_file_inst_avl_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => sequencer_reg_file_inst_avl_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => sequencer_reg_file_inst_avl_agent_m0_lock,                    --                .lock
			m0_readdata             => sequencer_reg_file_inst_avl_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => sequencer_reg_file_inst_avl_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => sequencer_reg_file_inst_avl_agent_m0_read,                    --                .read
			m0_waitrequest          => sequencer_reg_file_inst_avl_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => sequencer_reg_file_inst_avl_agent_m0_writedata,               --                .writedata
			m0_write                => sequencer_reg_file_inst_avl_agent_m0_write,                   --                .write
			rp_endofpacket          => sequencer_reg_file_inst_avl_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => sequencer_reg_file_inst_avl_agent_rp_ready,                   --                .ready
			rp_valid                => sequencer_reg_file_inst_avl_agent_rp_valid,                   --                .valid
			rp_data                 => sequencer_reg_file_inst_avl_agent_rp_data,                    --                .data
			rp_startofpacket        => sequencer_reg_file_inst_avl_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_001_src_ready,                                        --              cp.ready
			cp_valid                => cmd_mux_001_src_valid,                                        --                .valid
			cp_data                 => cmd_mux_001_src_data,                                         --                .data
			cp_startofpacket        => cmd_mux_001_src_startofpacket,                                --                .startofpacket
			cp_endofpacket          => cmd_mux_001_src_endofpacket,                                  --                .endofpacket
			cp_channel              => cmd_mux_001_src_channel,                                      --                .channel
			rf_sink_ready           => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => sequencer_reg_file_inst_avl_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => sequencer_reg_file_inst_avl_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => sequencer_reg_file_inst_avl_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => sequencer_reg_file_inst_avl_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => sequencer_reg_file_inst_avl_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_001_out_0_ready,                            -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_001_out_0_valid,                            --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_001_out_0_data,                             --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_001_out_0_error(0),                         --                .error
			rdata_fifo_src_ready    => sequencer_reg_file_inst_avl_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => sequencer_reg_file_inst_avl_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => sequencer_reg_file_inst_avl_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                         --     (terminated)
			m0_writeresponsevalid   => '0'                                                           --     (terminated)
		);

	sequencer_reg_file_inst_avl_agent_rsp_fifo : component altera_avalon_sc_fifo
		generic map (
			SYMBOLS_PER_BEAT    => 1,
			BITS_PER_SYMBOL     => 89,
			FIFO_DEPTH          => 2,
			CHANNEL_WIDTH       => 0,
			ERROR_WIDTH         => 0,
			USE_PACKETS         => 1,
			USE_FILL_LEVEL      => 0,
			EMPTY_LATENCY       => 1,
			USE_MEMORY_BLOCKS   => 0,
			USE_STORE_FORWARD   => 0,
			USE_ALMOST_FULL_IF  => 0,
			USE_ALMOST_EMPTY_IF => 0
		)
		port map (
			clk               => avl_clk_out_clk_clk,                                          --       clk.clk
			reset             => trk_mm_bridge_reset_reset_bridge_in_reset_reset,              -- clk_reset.reset
			in_data           => sequencer_reg_file_inst_avl_agent_rf_source_data,             --        in.data
			in_valid          => sequencer_reg_file_inst_avl_agent_rf_source_valid,            --          .valid
			in_ready          => sequencer_reg_file_inst_avl_agent_rf_source_ready,            --          .ready
			in_startofpacket  => sequencer_reg_file_inst_avl_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => sequencer_reg_file_inst_avl_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => sequencer_reg_file_inst_avl_agent_rsp_fifo_out_endofpacket,   --          .endofpacket
			csr_address       => "00",                                                         -- (terminated)
			csr_read          => '0',                                                          -- (terminated)
			csr_write         => '0',                                                          -- (terminated)
			csr_readdata      => open,                                                         -- (terminated)
			csr_writedata     => "00000000000000000000000000000000",                           -- (terminated)
			almost_full_data  => open,                                                         -- (terminated)
			almost_empty_data => open,                                                         -- (terminated)
			in_empty          => "0",                                                          -- (terminated)
			out_empty         => open,                                                         -- (terminated)
			in_error          => "0",                                                          -- (terminated)
			out_error         => open,                                                         -- (terminated)
			in_channel        => "0",                                                          -- (terminated)
			out_channel       => open                                                          -- (terminated)
		);

	router : component LPDDR2_s0_mm_interconnect_1_router
		port map (
			sink_ready         => trk_mm_bridge_m0_agent_cp_ready,                 --      sink.ready
			sink_valid         => trk_mm_bridge_m0_agent_cp_valid,                 --          .valid
			sink_data          => trk_mm_bridge_m0_agent_cp_data,                  --          .data
			sink_startofpacket => trk_mm_bridge_m0_agent_cp_startofpacket,         --          .startofpacket
			sink_endofpacket   => trk_mm_bridge_m0_agent_cp_endofpacket,           --          .endofpacket
			clk                => avl_clk_out_clk_clk,                             --       clk.clk
			reset              => trk_mm_bridge_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_src_ready,                                --       src.ready
			src_valid          => router_src_valid,                                --          .valid
			src_data           => router_src_data,                                 --          .data
			src_channel        => router_src_channel,                              --          .channel
			src_startofpacket  => router_src_startofpacket,                        --          .startofpacket
			src_endofpacket    => router_src_endofpacket                           --          .endofpacket
		);

	router_001 : component LPDDR2_s0_mm_interconnect_1_router_001
		port map (
			sink_ready         => sequencer_scc_mgr_inst_avl_agent_rp_ready,         --      sink.ready
			sink_valid         => sequencer_scc_mgr_inst_avl_agent_rp_valid,         --          .valid
			sink_data          => sequencer_scc_mgr_inst_avl_agent_rp_data,          --          .data
			sink_startofpacket => sequencer_scc_mgr_inst_avl_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => sequencer_scc_mgr_inst_avl_agent_rp_endofpacket,   --          .endofpacket
			clk                => avl_clk_out_clk_clk,                               --       clk.clk
			reset              => trk_mm_bridge_reset_reset_bridge_in_reset_reset,   -- clk_reset.reset
			src_ready          => router_001_src_ready,                              --       src.ready
			src_valid          => router_001_src_valid,                              --          .valid
			src_data           => router_001_src_data,                               --          .data
			src_channel        => router_001_src_channel,                            --          .channel
			src_startofpacket  => router_001_src_startofpacket,                      --          .startofpacket
			src_endofpacket    => router_001_src_endofpacket                         --          .endofpacket
		);

	router_002 : component LPDDR2_s0_mm_interconnect_1_router_001
		port map (
			sink_ready         => sequencer_reg_file_inst_avl_agent_rp_ready,         --      sink.ready
			sink_valid         => sequencer_reg_file_inst_avl_agent_rp_valid,         --          .valid
			sink_data          => sequencer_reg_file_inst_avl_agent_rp_data,          --          .data
			sink_startofpacket => sequencer_reg_file_inst_avl_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => sequencer_reg_file_inst_avl_agent_rp_endofpacket,   --          .endofpacket
			clk                => avl_clk_out_clk_clk,                                --       clk.clk
			reset              => trk_mm_bridge_reset_reset_bridge_in_reset_reset,    -- clk_reset.reset
			src_ready          => router_002_src_ready,                               --       src.ready
			src_valid          => router_002_src_valid,                               --          .valid
			src_data           => router_002_src_data,                                --          .data
			src_channel        => router_002_src_channel,                             --          .channel
			src_startofpacket  => router_002_src_startofpacket,                       --          .startofpacket
			src_endofpacket    => router_002_src_endofpacket                          --          .endofpacket
		);

	trk_mm_bridge_m0_limiter : component altera_merlin_traffic_limiter
		generic map (
			PKT_DEST_ID_H             => 74,
			PKT_DEST_ID_L             => 74,
			PKT_SRC_ID_H              => 73,
			PKT_SRC_ID_L              => 73,
			PKT_BYTE_CNT_H            => 62,
			PKT_BYTE_CNT_L            => 60,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_TRANS_POSTED          => 55,
			PKT_TRANS_WRITE           => 56,
			MAX_OUTSTANDING_RESPONSES => 1,
			PIPELINED                 => 0,
			ST_DATA_W                 => 88,
			ST_CHANNEL_W              => 2,
			VALID_WIDTH               => 2,
			ENFORCE_ORDER             => 1,
			PREVENT_HAZARDS           => 0,
			SUPPORTS_POSTED_WRITES    => 1,
			SUPPORTS_NONPOSTED_WRITES => 0,
			REORDER                   => 0
		)
		port map (
			clk                    => avl_clk_out_clk_clk,                             --       clk.clk
			reset                  => trk_mm_bridge_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			cmd_sink_ready         => router_src_ready,                                --  cmd_sink.ready
			cmd_sink_valid         => router_src_valid,                                --          .valid
			cmd_sink_data          => router_src_data,                                 --          .data
			cmd_sink_channel       => router_src_channel,                              --          .channel
			cmd_sink_startofpacket => router_src_startofpacket,                        --          .startofpacket
			cmd_sink_endofpacket   => router_src_endofpacket,                          --          .endofpacket
			cmd_src_ready          => trk_mm_bridge_m0_limiter_cmd_src_ready,          --   cmd_src.ready
			cmd_src_data           => trk_mm_bridge_m0_limiter_cmd_src_data,           --          .data
			cmd_src_channel        => trk_mm_bridge_m0_limiter_cmd_src_channel,        --          .channel
			cmd_src_startofpacket  => trk_mm_bridge_m0_limiter_cmd_src_startofpacket,  --          .startofpacket
			cmd_src_endofpacket    => trk_mm_bridge_m0_limiter_cmd_src_endofpacket,    --          .endofpacket
			rsp_sink_ready         => rsp_mux_src_ready,                               --  rsp_sink.ready
			rsp_sink_valid         => rsp_mux_src_valid,                               --          .valid
			rsp_sink_channel       => rsp_mux_src_channel,                             --          .channel
			rsp_sink_data          => rsp_mux_src_data,                                --          .data
			rsp_sink_startofpacket => rsp_mux_src_startofpacket,                       --          .startofpacket
			rsp_sink_endofpacket   => rsp_mux_src_endofpacket,                         --          .endofpacket
			rsp_src_ready          => trk_mm_bridge_m0_limiter_rsp_src_ready,          --   rsp_src.ready
			rsp_src_valid          => trk_mm_bridge_m0_limiter_rsp_src_valid,          --          .valid
			rsp_src_data           => trk_mm_bridge_m0_limiter_rsp_src_data,           --          .data
			rsp_src_channel        => trk_mm_bridge_m0_limiter_rsp_src_channel,        --          .channel
			rsp_src_startofpacket  => trk_mm_bridge_m0_limiter_rsp_src_startofpacket,  --          .startofpacket
			rsp_src_endofpacket    => trk_mm_bridge_m0_limiter_rsp_src_endofpacket,    --          .endofpacket
			cmd_src_valid          => trk_mm_bridge_m0_limiter_cmd_valid_data          -- cmd_valid.data
		);

	cmd_demux : component LPDDR2_s0_mm_interconnect_1_cmd_demux
		port map (
			clk                => avl_clk_out_clk_clk,                             --        clk.clk
			reset              => trk_mm_bridge_reset_reset_bridge_in_reset_reset, --  clk_reset.reset
			sink_ready         => trk_mm_bridge_m0_limiter_cmd_src_ready,          --       sink.ready
			sink_channel       => trk_mm_bridge_m0_limiter_cmd_src_channel,        --           .channel
			sink_data          => trk_mm_bridge_m0_limiter_cmd_src_data,           --           .data
			sink_startofpacket => trk_mm_bridge_m0_limiter_cmd_src_startofpacket,  --           .startofpacket
			sink_endofpacket   => trk_mm_bridge_m0_limiter_cmd_src_endofpacket,    --           .endofpacket
			sink_valid         => trk_mm_bridge_m0_limiter_cmd_valid_data,         -- sink_valid.data
			src0_ready         => cmd_demux_src0_ready,                            --       src0.ready
			src0_valid         => cmd_demux_src0_valid,                            --           .valid
			src0_data          => cmd_demux_src0_data,                             --           .data
			src0_channel       => cmd_demux_src0_channel,                          --           .channel
			src0_startofpacket => cmd_demux_src0_startofpacket,                    --           .startofpacket
			src0_endofpacket   => cmd_demux_src0_endofpacket,                      --           .endofpacket
			src1_ready         => cmd_demux_src1_ready,                            --       src1.ready
			src1_valid         => cmd_demux_src1_valid,                            --           .valid
			src1_data          => cmd_demux_src1_data,                             --           .data
			src1_channel       => cmd_demux_src1_channel,                          --           .channel
			src1_startofpacket => cmd_demux_src1_startofpacket,                    --           .startofpacket
			src1_endofpacket   => cmd_demux_src1_endofpacket                       --           .endofpacket
		);

	cmd_mux : component LPDDR2_s0_mm_interconnect_1_cmd_mux
		port map (
			clk                 => avl_clk_out_clk_clk,                             --       clk.clk
			reset               => trk_mm_bridge_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_src_ready,                               --       src.ready
			src_valid           => cmd_mux_src_valid,                               --          .valid
			src_data            => cmd_mux_src_data,                                --          .data
			src_channel         => cmd_mux_src_channel,                             --          .channel
			src_startofpacket   => cmd_mux_src_startofpacket,                       --          .startofpacket
			src_endofpacket     => cmd_mux_src_endofpacket,                         --          .endofpacket
			sink0_ready         => cmd_demux_src0_ready,                            --     sink0.ready
			sink0_valid         => cmd_demux_src0_valid,                            --          .valid
			sink0_channel       => cmd_demux_src0_channel,                          --          .channel
			sink0_data          => cmd_demux_src0_data,                             --          .data
			sink0_startofpacket => cmd_demux_src0_startofpacket,                    --          .startofpacket
			sink0_endofpacket   => cmd_demux_src0_endofpacket                       --          .endofpacket
		);

	cmd_mux_001 : component LPDDR2_s0_mm_interconnect_1_cmd_mux
		port map (
			clk                 => avl_clk_out_clk_clk,                             --       clk.clk
			reset               => trk_mm_bridge_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_001_src_ready,                           --       src.ready
			src_valid           => cmd_mux_001_src_valid,                           --          .valid
			src_data            => cmd_mux_001_src_data,                            --          .data
			src_channel         => cmd_mux_001_src_channel,                         --          .channel
			src_startofpacket   => cmd_mux_001_src_startofpacket,                   --          .startofpacket
			src_endofpacket     => cmd_mux_001_src_endofpacket,                     --          .endofpacket
			sink0_ready         => cmd_demux_src1_ready,                            --     sink0.ready
			sink0_valid         => cmd_demux_src1_valid,                            --          .valid
			sink0_channel       => cmd_demux_src1_channel,                          --          .channel
			sink0_data          => cmd_demux_src1_data,                             --          .data
			sink0_startofpacket => cmd_demux_src1_startofpacket,                    --          .startofpacket
			sink0_endofpacket   => cmd_demux_src1_endofpacket                       --          .endofpacket
		);

	rsp_demux : component LPDDR2_s0_mm_interconnect_1_rsp_demux
		port map (
			clk                => avl_clk_out_clk_clk,                             --       clk.clk
			reset              => trk_mm_bridge_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_001_src_ready,                            --      sink.ready
			sink_channel       => router_001_src_channel,                          --          .channel
			sink_data          => router_001_src_data,                             --          .data
			sink_startofpacket => router_001_src_startofpacket,                    --          .startofpacket
			sink_endofpacket   => router_001_src_endofpacket,                      --          .endofpacket
			sink_valid(0)      => router_001_src_valid,                            --          .valid
			src0_ready         => rsp_demux_src0_ready,                            --      src0.ready
			src0_valid         => rsp_demux_src0_valid,                            --          .valid
			src0_data          => rsp_demux_src0_data,                             --          .data
			src0_channel       => rsp_demux_src0_channel,                          --          .channel
			src0_startofpacket => rsp_demux_src0_startofpacket,                    --          .startofpacket
			src0_endofpacket   => rsp_demux_src0_endofpacket                       --          .endofpacket
		);

	rsp_demux_001 : component LPDDR2_s0_mm_interconnect_1_rsp_demux
		port map (
			clk                => avl_clk_out_clk_clk,                             --       clk.clk
			reset              => trk_mm_bridge_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_002_src_ready,                            --      sink.ready
			sink_channel       => router_002_src_channel,                          --          .channel
			sink_data          => router_002_src_data,                             --          .data
			sink_startofpacket => router_002_src_startofpacket,                    --          .startofpacket
			sink_endofpacket   => router_002_src_endofpacket,                      --          .endofpacket
			sink_valid(0)      => router_002_src_valid,                            --          .valid
			src0_ready         => rsp_demux_001_src0_ready,                        --      src0.ready
			src0_valid         => rsp_demux_001_src0_valid,                        --          .valid
			src0_data          => rsp_demux_001_src0_data,                         --          .data
			src0_channel       => rsp_demux_001_src0_channel,                      --          .channel
			src0_startofpacket => rsp_demux_001_src0_startofpacket,                --          .startofpacket
			src0_endofpacket   => rsp_demux_001_src0_endofpacket                   --          .endofpacket
		);

	rsp_mux : component LPDDR2_s0_mm_interconnect_1_rsp_mux
		port map (
			clk                 => avl_clk_out_clk_clk,                             --       clk.clk
			reset               => trk_mm_bridge_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_src_ready,                               --       src.ready
			src_valid           => rsp_mux_src_valid,                               --          .valid
			src_data            => rsp_mux_src_data,                                --          .data
			src_channel         => rsp_mux_src_channel,                             --          .channel
			src_startofpacket   => rsp_mux_src_startofpacket,                       --          .startofpacket
			src_endofpacket     => rsp_mux_src_endofpacket,                         --          .endofpacket
			sink0_ready         => rsp_demux_src0_ready,                            --     sink0.ready
			sink0_valid         => rsp_demux_src0_valid,                            --          .valid
			sink0_channel       => rsp_demux_src0_channel,                          --          .channel
			sink0_data          => rsp_demux_src0_data,                             --          .data
			sink0_startofpacket => rsp_demux_src0_startofpacket,                    --          .startofpacket
			sink0_endofpacket   => rsp_demux_src0_endofpacket,                      --          .endofpacket
			sink1_ready         => rsp_demux_001_src0_ready,                        --     sink1.ready
			sink1_valid         => rsp_demux_001_src0_valid,                        --          .valid
			sink1_channel       => rsp_demux_001_src0_channel,                      --          .channel
			sink1_data          => rsp_demux_001_src0_data,                         --          .data
			sink1_startofpacket => rsp_demux_001_src0_startofpacket,                --          .startofpacket
			sink1_endofpacket   => rsp_demux_001_src0_endofpacket                   --          .endofpacket
		);

	avalon_st_adapter : component LPDDR2_s0_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => avl_clk_out_clk_clk,                                   -- in_clk_0.clk
			in_rst_0_reset => trk_mm_bridge_reset_reset_bridge_in_reset_reset,       -- in_rst_0.reset
			in_0_data      => sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => sequencer_scc_mgr_inst_avl_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_out_0_data,                          --    out_0.data
			out_0_valid    => avalon_st_adapter_out_0_valid,                         --         .valid
			out_0_ready    => avalon_st_adapter_out_0_ready,                         --         .ready
			out_0_error    => avalon_st_adapter_out_0_error                          --         .error
		);

	avalon_st_adapter_001 : component LPDDR2_s0_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => avl_clk_out_clk_clk,                                    -- in_clk_0.clk
			in_rst_0_reset => trk_mm_bridge_reset_reset_bridge_in_reset_reset,        -- in_rst_0.reset
			in_0_data      => sequencer_reg_file_inst_avl_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => sequencer_reg_file_inst_avl_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => sequencer_reg_file_inst_avl_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_001_out_0_data,                       --    out_0.data
			out_0_valid    => avalon_st_adapter_001_out_0_valid,                      --         .valid
			out_0_ready    => avalon_st_adapter_001_out_0_ready,                      --         .ready
			out_0_error    => avalon_st_adapter_001_out_0_error                       --         .error
		);

end architecture rtl; -- of LPDDR2_s0_mm_interconnect_1
