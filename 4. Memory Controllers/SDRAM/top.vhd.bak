--Library
library IEEE;
Use IEEE.std_logic_1164.all;
Use IEEE.numeric_std.all;

--Entity
entity top is
	generic(
				DATA_WIDTH	: positive := 32;
				ADDR_WIDTH	: positive := 29;
				MEM_DEPTH	: positive := (1 sll ADDR_WIDTH);
				BE				: std_logic_vector(3 downto 0) := "0111"
			 );
	port	(
				wr_data_0	:	in std_logic_vector((DATA_WIDTH - 1) downto 0);
				wr_data_1	:	in std_logic_vector((DATA_WIDTH - 1) downto 0);
				wr_data_2	:	in std_logic_vector((DATA_WIDTH - 1) downto 0);
				wr_data_3	:	in std_logic_vector((DATA_WIDTH - 1) downto 0);
				
				clk_50m		:	in std_logic;
				clk			:	in std_logic;
				reset			:	in std_logic;
				
				av1_write_req_0	:	in std_logic;
				av1_read_req_0		:	in std_logic;
				av1_write_req_1	:	in std_logic;
				av1_read_req_1		:	in std_logic;
				av1_write_req_2	:	in std_logic;
				av1_read_req_2		:	in std_logic;
				av1_write_req_3	:	in std_logic;
				av1_read_req_3		:	in std_logic;
				
				rd_data_valid_0	:	out std_logic;
				rd_data_valid_1	:	out std_logic;
				rd_data_valid_2	:	out std_logic;
				rd_data_valid_3	:	out std_logic;
				
				ram_rdy				:	out std_logic register := DEASSERT_H;
				
				av1_ready_0_fl		:	out std_logic register;
				av1_ready_1_fl		:	out std_logic register;
				av1_ready_2_fl		:	out std_logic register;
				av1_ready_3_fl		:	out std_logic register;
				
				av1_addr_0			:	in std_logic_vector((ADDR_WIDTH - 1) downto 0);
				av1_addr_1			:	in std_logic_vector((ADDR_WIDTH - 1) downto 0);
				av1_addr_2			:	in std_logic_vector((ADDR_WIDTH - 1) downto 0);
				av1_addr_3			:	in std_logic_vector((ADDR_WIDTH - 1) downto 0);
				
				rd_data_0			:	out std_logic_vector((DATA_WIDTH - 1) downto 0) register;
				rd_data_1			:	out std_logic_vector((DATA_WIDTH - 1) downto 0) register;
				rd_data_2			:	out std_logic_vector((DATA_WIDTH - 1) downto 0) register;
				rd_data_3			:	out std_logic_vector((DATA_WIDTH - 1) downto 0) register;
				
				mem_ca				:	out std_logic_vector(9 downto 0);
				mem_ck				:	out std_logic;
				mem_ck_n				:	out std_logic;
				mem_cke				:	out std_logic;
				mem_cs_n				:	out std_logic;
				mem_dm				:	out std_logic_vector(3 downto 0);
				mem_dq				:	inout std_logic_vector(31 downto 0);
				mem_dqs				:	inout std_logic_vector(3 downto 0);
				mem_dqs_n			:	inout std_logic_vector(3 downto 0);
				oct_rzqin			:	in std_logic
			);
end top;

--Architecture
architecture logic of ram_init is
--States
constant INIT : std_logic := '0';
constant IDLE : std_logic := '1';

constant ASSERT_L		: std_logic := '0';
constant DEASSERT_L	: std_logic := '1';
constant ASSERT_H		: std_logic := '1';
constant DEASSERT_H	: std_logic := '0';

--Declarations for Hard Memory Controller IP
signal pll_locked_ddr			: std_logic;
signal local_cal_success_fl	: std_logic register;

signal av1_burstbegin_0			: std_logic register;
signal av1_ready_0				: std_logic;
signal av1_be_0					: std_logic_vector(3 downto 0);
signal av1_rdata_valid_0		: std_logic;
signal av1_size_0					: std_logic_vector(2 downto 0) register;












end logic;